// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name LikeMindsFeed
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import Alamofire
import Foundation
import Swift
import SystemConfiguration
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_hasMissingDesignatedInitializers final public class AddCommentRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.AddCommentRequest.Builder
  public class Builder {
    public init()
    public func postId(_ postId: Swift.String) -> LikeMindsFeed.AddCommentRequest.Builder
    public func text(_ text: Swift.String) -> LikeMindsFeed.AddCommentRequest.Builder
    public func tempId(_ tempId: Swift.String) -> LikeMindsFeed.AddCommentRequest.Builder
    public func build() -> LikeMindsFeed.AddCommentRequest
    @objc deinit
  }
  final public func toBuilder() -> LikeMindsFeed.AddCommentRequest.Builder
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers final public class AddPollOptionRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.AddPollOptionRequest.Builder
  public class Builder {
    public init()
    public func pollID(_ pollID: Swift.String?) -> LikeMindsFeed.AddPollOptionRequest.Builder
    public func pollText(_ pollText: Swift.String?) -> LikeMindsFeed.AddPollOptionRequest.Builder
    public func build() -> LikeMindsFeed.AddPollOptionRequest
    @objc deinit
  }
  final public func toBuilder() -> LikeMindsFeed.AddPollOptionRequest.Builder
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
}
public struct AddPollOptionResponse : Swift.Decodable {
  public let widget: LikeMindsFeed.Widget?
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers final public class AddPostRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.AddPostRequest.Builder
  final public func toBuilder() -> LikeMindsFeed.AddPostRequest.Builder
  public class Builder {
    public init()
    public func text(_ text: Swift.String?) -> LikeMindsFeed.AddPostRequest.Builder
    public func heading(_ heading: Swift.String?) -> LikeMindsFeed.AddPostRequest.Builder
    public func onBehalfOfUUID(_ onBehalfOfUUID: Swift.String?) -> LikeMindsFeed.AddPostRequest.Builder
    public func attachments(_ attachments: [LikeMindsFeed.Attachment]?) -> LikeMindsFeed.AddPostRequest.Builder
    public func topics(_ topics: [Swift.String]?) -> LikeMindsFeed.AddPostRequest.Builder
    public func tempId(_ tempId: Swift.String?) -> LikeMindsFeed.AddPostRequest.Builder
    public func build() -> LikeMindsFeed.AddPostRequest
    @objc deinit
  }
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
}
public enum AttachmentType : Swift.Int, Swift.Encodable {
  case image
  case video
  case doc
  case link
  case widget
  case poll
  case article
  case reel
  case unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public class Attachment : Swift.Codable {
  public var attachmentType: LikeMindsFeed.AttachmentType?
  public var attachmentMeta: LikeMindsFeed.AttachmentMeta?
  required public init(from decoder: any Swift.Decoder) throws
  public init()
  public func attachmentMeta(_ attachmentMeta: LikeMindsFeed.AttachmentMeta) -> LikeMindsFeed.Attachment
  public func attachmentType(_ attachmentType: LikeMindsFeed.AttachmentType) -> LikeMindsFeed.Attachment
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class AttachmentMeta : Swift.Codable {
  public var attachmentUrl: Swift.String?
  public var format: Swift.String?, name: Swift.String?
  public var width: Swift.Int?
  public var height: Swift.Int?
  public var pageCount: Swift.Int?
  public var duration: Swift.Int?
  public var size: Swift.Int?
  public var ogTags: LikeMindsFeed.OGTags?
  public var coverImageUrl: Swift.String? {
    get
  }
  public var title: Swift.String? {
    get
  }
  public var body: Swift.String? {
    get
  }
  public var entityID: Swift.String? {
    get
  }
  public var thumbnailUrl: Swift.String? {
    get
  }
  public var expiryTime: Swift.Int? {
    get
  }
  public var pollOptions: [Swift.String]? {
    get
  }
  public var multiSelectState: Swift.String {
    get
  }
  public var pollType: Swift.String {
    get
  }
  public var multSelectNo: Swift.Int {
    get
  }
  public var isAnonymous: Swift.Bool {
    get
  }
  public var allowAddOptions: Swift.Bool {
    get
  }
  public var meta: [Swift.String : Any]?
  public class Builder {
    public var attachmentUrl: Swift.String?
    public var format: Swift.String?, name: Swift.String?
    public var width: Swift.Int?, height: Swift.Int?, pageCount: Swift.Int?, duration: Swift.Int?, size: Swift.Int?
    public var ogTags: LikeMindsFeed.OGTags?
    public var coverImageUrl: Swift.String?
    public var title: Swift.String?
    public var body: Swift.String?
    public var entityID: Swift.String?
    public var thumbnailUrl: Swift.String?
    public var expiryTime: Swift.Int?
    public var pollOptions: [Swift.String]?
    public var multiSelectState: Swift.String
    public var pollType: Swift.String
    public var multSelectNo: Swift.Int
    public var isAnonymous: Swift.Bool
    public var allowAddOptions: Swift.Bool
    public var meta: [Swift.String : Any]?
    public init()
    public func attachmentUrl(_ attachmentUrl: Swift.String?) -> LikeMindsFeed.AttachmentMeta.Builder
    public func format(_ format: Swift.String?) -> LikeMindsFeed.AttachmentMeta.Builder
    public func name(_ name: Swift.String?) -> LikeMindsFeed.AttachmentMeta.Builder
    public func width(_ width: Swift.Int?) -> LikeMindsFeed.AttachmentMeta.Builder
    public func height(_ height: Swift.Int?) -> LikeMindsFeed.AttachmentMeta.Builder
    public func pageCount(_ pageCount: Swift.Int?) -> LikeMindsFeed.AttachmentMeta.Builder
    public func duration(_ duration: Swift.Int?) -> LikeMindsFeed.AttachmentMeta.Builder
    public func size(_ size: Swift.Int?) -> LikeMindsFeed.AttachmentMeta.Builder
    public func ogTags(_ ogTags: LikeMindsFeed.OGTags?) -> LikeMindsFeed.AttachmentMeta.Builder
    public func coverImageUrl(_ coverImageUrl: Swift.String?) -> LikeMindsFeed.AttachmentMeta.Builder
    public func title(_ title: Swift.String?) -> LikeMindsFeed.AttachmentMeta.Builder
    public func body(_ body: Swift.String?) -> LikeMindsFeed.AttachmentMeta.Builder
    public func entityID(_ entityID: Swift.String?) -> LikeMindsFeed.AttachmentMeta.Builder
    public func thumbnailUrl(_ thumbnailUrl: Swift.String?) -> LikeMindsFeed.AttachmentMeta.Builder
    public func expiryTime(_ expiryTime: Swift.Int?) -> LikeMindsFeed.AttachmentMeta.Builder
    public func pollOptions(_ pollOptions: [Swift.String]?) -> LikeMindsFeed.AttachmentMeta.Builder
    public func multiSelectState(_ multiSelectState: Swift.String) -> LikeMindsFeed.AttachmentMeta.Builder
    public func pollType(_ pollType: Swift.String) -> LikeMindsFeed.AttachmentMeta.Builder
    public func multSelectNo(_ multSelectNo: Swift.Int) -> LikeMindsFeed.AttachmentMeta.Builder
    public func isAnonymous(_ isAnonymous: Swift.Bool) -> LikeMindsFeed.AttachmentMeta.Builder
    public func allowAddOptions(_ allowAddOptions: Swift.Bool) -> LikeMindsFeed.AttachmentMeta.Builder
    public func meta(_ meta: [Swift.String : Any]?) -> LikeMindsFeed.AttachmentMeta.Builder
    public func build() -> LikeMindsFeed.AttachmentMeta
    @objc deinit
  }
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
public struct Comment : Swift.Codable {
  public let id: Swift.String?, userId: Swift.String?, uuid: Swift.String?, deletedByUUID: Swift.String?
  public let postId: Swift.String?
  public let commentsCount: Swift.Int?, createdAt: Swift.Int?, level: Swift.Int?, likesCount: Swift.Int?
  public let isEdited: Swift.Bool?, isLiked: Swift.Bool?
  public let menuItems: [LikeMindsFeed.MenuItem]?
  public let replies: [LikeMindsFeed.Comment]?
  public let text: Swift.String?
  public let updatedAt: Swift.Int?
  public let tempId: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Community : Swift.Decodable {
  public let autoApproval: Swift.Bool?
  public let communitySettingRights: [LikeMindsFeed.CommunitySettingRight]?
  public let feeEvent: Swift.Int?, feeMembership: Swift.Int?, feePaymentPages: Swift.Int?, gracePeriod: Swift.Int?
  public let hideDmTab: Swift.Bool?
  public let id: Swift.Int?
  public let imageURL: Swift.String?
  public let isDiscoverable: Swift.Bool?, isFreemiumCommunity: Swift.Bool?, isPaid: Swift.Bool?, isWhitelabel: Swift.Bool?
  public let membersCount: Swift.Int?
  public let name: Swift.String?, purpose: Swift.String?
  public let referralEnabled: Swift.Bool?
  public let subType: Swift.Int?, type: Swift.Int?, updatedAt: Swift.Int?
  public init(from decoder: any Swift.Decoder) throws
}
public struct CommunitySettingRight : Swift.Decodable {
  public let id: Swift.Int?
  public let isLocked: Swift.Bool?, isSelected: Swift.Bool?
  public let state: Swift.Int?
  public let title: Swift.String?, subTitle: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers final public class Constant {
  public static let shared: LikeMindsFeed.Constant
  final public let paths: LikeMindsFeed.Paths
  final public let keys: LikeMindsFeed.Keys
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class Paths {
  public static let shared: LikeMindsFeed.Paths
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class Keys {
  public static let shared: LikeMindsFeed.Keys
  final public let page: Swift.String
  final public let pageSize: Swift.String
  final public let search: Swift.String
  final public let searchType: Swift.String
  final public let startFeedWithPostIds: Swift.String
  final public let postId: Swift.String
  final public let commentId: Swift.String
  final public let topicIds: Swift.String
  final public let isEnabled: Swift.String
  final public let feedroomId: Swift.String
  final public let activityId: Swift.String
  final public let pollId: Swift.String
  final public let votes: Swift.String
  final public let options: Swift.String
  final public let pollText: Swift.String
  final public let configurationTypes: Swift.String
  final public let memberState: Swift.String
  final public let searchName: Swift.String
  final public let type: Swift.String
  final public let url: Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class DecodeUrlRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.DecodeUrlRequest.Builder
  public class Builder {
    public init()
    public func link(_ link: Swift.String) -> LikeMindsFeed.DecodeUrlRequest.Builder
    public func build() -> LikeMindsFeed.DecodeUrlRequest
    @objc deinit
  }
  final public func toBuilder() -> LikeMindsFeed.DecodeUrlRequest.Builder
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
}
public struct DecodeUrlResponse : Swift.Decodable {
  public let oGTags: LikeMindsFeed.OGTags?
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers final public class DeleteCommentRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.DeleteCommentRequest.Builder
  public class Builder {
    public init()
    public func postId(_ postId: Swift.String) -> LikeMindsFeed.DeleteCommentRequest.Builder
    public func commentId(_ commentId: Swift.String) -> LikeMindsFeed.DeleteCommentRequest.Builder
    public func deleteReason(_ reason: Swift.String?) -> LikeMindsFeed.DeleteCommentRequest.Builder
    public func build() -> LikeMindsFeed.DeleteCommentRequest
    @objc deinit
  }
  final public func toBuilder() -> LikeMindsFeed.DeleteCommentRequest.Builder
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers final public class DeletePostRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.DeletePostRequest.Builder
  public class Builder {
    public init()
    public func postId(_ postId: Swift.String) -> LikeMindsFeed.DeletePostRequest.Builder
    public func deleteReason(_ reason: Swift.String?) -> LikeMindsFeed.DeletePostRequest.Builder
    public func build() -> LikeMindsFeed.DeletePostRequest
    @objc deinit
  }
  final public func toBuilder() -> LikeMindsFeed.DeletePostRequest.Builder
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers final public class EditCommentRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.EditCommentRequest.Builder
  public class Builder {
    public init()
    public func text(_ text: Swift.String) -> LikeMindsFeed.EditCommentRequest.Builder
    public func postId(_ postId: Swift.String) -> LikeMindsFeed.EditCommentRequest.Builder
    public func commentId(_ commentId: Swift.String) -> LikeMindsFeed.EditCommentRequest.Builder
    public func build() -> LikeMindsFeed.EditCommentRequest
    @objc deinit
  }
  final public func toBuilder() -> LikeMindsFeed.EditCommentRequest.Builder
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
}
public struct EditCommentResponse : Swift.Codable {
  public let comment: LikeMindsFeed.Comment?
  public let users: [Swift.String : LikeMindsFeed.User]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers final public class EditPostRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.EditPostRequest.Builder
  public class Builder {
    public init()
    public func text(_ text: Swift.String?) -> LikeMindsFeed.EditPostRequest.Builder
    public func heading(_ heading: Swift.String?) -> LikeMindsFeed.EditPostRequest.Builder
    public func attachments(_ attachments: [LikeMindsFeed.Attachment]) -> LikeMindsFeed.EditPostRequest.Builder
    public func postId(_ postId: Swift.String) -> LikeMindsFeed.EditPostRequest.Builder
    public func onBehalfOfUUID(_ onBehalfOfUUID: Swift.String?) -> LikeMindsFeed.EditPostRequest.Builder
    public func addTopics(_ topics: [Swift.String]) -> LikeMindsFeed.EditPostRequest.Builder
    public func build() -> LikeMindsFeed.EditPostRequest
    @objc deinit
  }
  final public func toBuilder() -> LikeMindsFeed.EditPostRequest.Builder
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
}
public struct EditPostResponse : Swift.Decodable {
  public let post: LikeMindsFeed.Post?
  public let users: [Swift.String : LikeMindsFeed.User]?
  public let widgets: [Swift.String : LikeMindsFeed.Widget]?
  public let topics: [Swift.String : LikeMindsFeed.TopicFeedResponse.TopicResponse]?
  public init(from decoder: any Swift.Decoder) throws
}
public struct Endpoint {
}
extension LikeMindsFeed.Endpoint {
  public var url: Foundation.URL? {
    get
  }
}
@_hasMissingDesignatedInitializers final public class FeedTokenManager {
  public static var shared: LikeMindsFeed.FeedTokenManager {
    get
  }
  @objc deinit
}
public class Fonts {
  public init(regular: Swift.String, medium: Swift.String, bold: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class GetAllMembersRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.GetAllMembersRequest.Builder
  public class Builder {
    public init()
    public func page(_ page: Swift.Int) -> LikeMindsFeed.GetAllMembersRequest.Builder
    public func pageSize(_ pageSize: Swift.Int) -> LikeMindsFeed.GetAllMembersRequest.Builder
    public func build() -> LikeMindsFeed.GetAllMembersRequest
    @objc deinit
  }
  final public func toBuilder() -> LikeMindsFeed.GetAllMembersRequest.Builder
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
}
public struct GetAllMembersResponse : Swift.Decodable {
  public let community: LikeMindsFeed.Community?
  public let members: [LikeMindsFeed.User]?
  public let totalFilteredMembers: Swift.Int?, totalMembers: Swift.Int?, totalOnlyMembers: Swift.Int?, totalPendingMembers: Swift.Int?
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers final public class GetCommentLikesRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.GetCommentLikesRequest.Builder
  public class Builder {
    public init()
    public func postId(_ postId: Swift.String) -> LikeMindsFeed.GetCommentLikesRequest.Builder
    public func commentId(_ commentId: Swift.String) -> LikeMindsFeed.GetCommentLikesRequest.Builder
    public func page(_ page: Swift.Int) -> LikeMindsFeed.GetCommentLikesRequest.Builder
    public func pageSize(_ pageSize: Swift.Int) -> LikeMindsFeed.GetCommentLikesRequest.Builder
    public func build() -> LikeMindsFeed.GetCommentLikesRequest
    @objc deinit
  }
  final public func toBuilder() -> LikeMindsFeed.GetCommentLikesRequest.Builder
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers final public class GetCommentRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.GetCommentRequest.Builder
  public class Builder {
    public init()
    public func postId(_ postId: Swift.String) -> LikeMindsFeed.GetCommentRequest.Builder
    public func commentId(_ commentId: Swift.String) -> LikeMindsFeed.GetCommentRequest.Builder
    public func page(_ page: Swift.Int) -> LikeMindsFeed.GetCommentRequest.Builder
    public func pageSize(_ pageSize: Swift.Int) -> LikeMindsFeed.GetCommentRequest.Builder
    public func build() -> LikeMindsFeed.GetCommentRequest
    @objc deinit
  }
  final public func toBuilder() -> LikeMindsFeed.GetCommentRequest.Builder
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
}
public struct GetCommentResponse : Swift.Codable {
  public let comment: LikeMindsFeed.Comment?
  public let users: [Swift.String : LikeMindsFeed.User]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct GetCommentsLikeResponse : Swift.Codable {
  public let likes: [LikeMindsFeed.Like]
  public let totalLikes: Swift.Int
  public let users: [Swift.String : LikeMindsFeed.User]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers final public class GetCommunityConfigurationRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.GetCommunityConfigurationRequest.Builder
  public class Builder {
    public init()
    public func configurationTypes(_ configurationTypes: [Swift.String]) -> LikeMindsFeed.GetCommunityConfigurationRequest.Builder
    public func build() -> LikeMindsFeed.GetCommunityConfigurationRequest
    @objc deinit
  }
  final public func toBuilder() -> LikeMindsFeed.GetCommunityConfigurationRequest.Builder
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
}
public struct GetCommunityConfigurationResponse : Swift.Decodable {
  public let communityConfigurations: [LikeMindsFeed.CommunityConfiguration]?
  public init(from decoder: any Swift.Decoder) throws
}
public struct CommunityConfiguration : Swift.Codable {
  public let type: Swift.String?
  public let value: LikeMindsFeed.CommunityConfiguration.Value?
  public let description: Swift.String?
  public struct Value : Swift.Codable {
    public let post: Swift.String?
    public let comment: Swift.String?
    public let like: LikeMindsFeed.CommunityConfiguration.Value.ContainerValue?
    public let maxVideoSize: Swift.Int?, maxImageSize: Swift.Int?
    public let widgetsEnabled: Swift.Bool?
    public struct ContainerValue : Swift.Codable {
      public let entityName: Swift.String?
      public let pasTenseName: Swift.String?
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers final public class GetFeedOfFeedRoomRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.GetFeedOfFeedRoomRequest.Builder
  public class Builder {
    public init()
    public func feedroomId(_ feedroomId: Swift.String) -> LikeMindsFeed.GetFeedOfFeedRoomRequest.Builder
    public func build() -> LikeMindsFeed.GetFeedOfFeedRoomRequest
    @objc deinit
  }
  final public func toBuilder() -> LikeMindsFeed.GetFeedOfFeedRoomRequest.Builder
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
}
public struct GetFeedOfFeedRoomResponse : Swift.Decodable {
  public let posts: [LikeMindsFeed.Post]?
  public let users: [LikeMindsFeed.LikedUser]
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers final public class GetFeedPostRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.GetFeedPostRequest.Builder
  public class Builder {
    public init()
    public func page(_ page: Swift.Int) -> LikeMindsFeed.GetFeedPostRequest.Builder
    public func pageSize(_ pageSize: Swift.Int) -> LikeMindsFeed.GetFeedPostRequest.Builder
    public func build() -> LikeMindsFeed.GetFeedPostRequest
    @objc deinit
  }
  final public func toBuilder() -> LikeMindsFeed.GetFeedPostRequest.Builder
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers final public class GetFeedRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.GetFeedRequest.Builder
  public class Builder {
    public init()
    public func page(_ page: Swift.Int) -> LikeMindsFeed.GetFeedRequest.Builder
    public func pageSize(_ pageSize: Swift.Int) -> LikeMindsFeed.GetFeedRequest.Builder
    public func topics(_ topics: [Swift.String]) -> LikeMindsFeed.GetFeedRequest.Builder
    public func startFeedWithPostIds(_ postIds: [Swift.String]) -> LikeMindsFeed.GetFeedRequest.Builder
    public func build() -> LikeMindsFeed.GetFeedRequest
    @objc deinit
  }
  final public func toBuilder() -> LikeMindsFeed.GetFeedRequest.Builder
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
}
public struct GetFeedResponse : Swift.Decodable {
  public let posts: [LikeMindsFeed.Post]?
  public let users: [Swift.String : LikeMindsFeed.User]?
  public let topics: [Swift.String : LikeMindsFeed.TopicFeedResponse.TopicResponse]?
  public let widgets: [Swift.String : LikeMindsFeed.Widget]?
  public let filteredComments: [Swift.String : LikeMindsFeed.Comment]?
  public init(from decoder: any Swift.Decoder) throws
}
public struct GetFeedRoomRequest : Swift.Encodable {
  public init(feedroomId: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum MemberState : Swift.Int, Swift.Codable {
  case admin
  case member
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct GetMemberStateResponse : Swift.Codable {
  public let createdAt: Swift.String?
  public let editRequired: Swift.Bool?
  public let member: LikeMindsFeed.User?
  public let managerRights: [LikeMindsFeed.ManagerRight]?
  public let memberRights: [LikeMindsFeed.MemberRight]?
  public let state: Swift.Int?
  public let toolState: Swift.Int?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers final public class GetNotificationFeedRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.GetNotificationFeedRequest.Builder
  public class Builder {
    public init()
    public func page(_ page: Swift.Int) -> LikeMindsFeed.GetNotificationFeedRequest.Builder
    public func pageSize(_ pageSize: Swift.Int) -> LikeMindsFeed.GetNotificationFeedRequest.Builder
    public func build() -> LikeMindsFeed.GetNotificationFeedRequest
    @objc deinit
  }
  final public func toBuilder() -> LikeMindsFeed.GetNotificationFeedRequest.Builder
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
}
public struct GetNotificationFeedResponse : Swift.Decodable {
  public let activities: [LikeMindsFeed.Activity]?
  public let users: [Swift.String : LikeMindsFeed.User]?
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers final public class GetPollVotesRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.GetPollVotesRequest.Builder
  public class Builder {
    public init()
    public func pollID(_ pollID: Swift.String?) -> LikeMindsFeed.GetPollVotesRequest.Builder
    public func options(_ options: [Swift.String]) -> LikeMindsFeed.GetPollVotesRequest.Builder
    public func page(_ page: Swift.Int) -> LikeMindsFeed.GetPollVotesRequest.Builder
    public func pageSize(_ pageSize: Swift.Int) -> LikeMindsFeed.GetPollVotesRequest.Builder
    public func build() -> LikeMindsFeed.GetPollVotesRequest
    @objc deinit
  }
  final public func toBuilder() -> LikeMindsFeed.GetPollVotesRequest.Builder
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
}
public struct GetPollVotesResponse : Swift.Decodable {
  public struct Vote : Swift.Decodable {
    public let id: Swift.String?
    public let users: [Swift.String]?
    public init(from decoder: any Swift.Decoder) throws
  }
  public let users: [Swift.String : LikeMindsFeed.User]?
  public let votes: [LikeMindsFeed.GetPollVotesResponse.Vote]?
  public init(from decoder: any Swift.Decoder) throws
}
public struct GetPostLikeResponse : Swift.Codable {
  public let likes: [LikeMindsFeed.Like]?
  public let totalCount: Swift.Int?
  public let users: [Swift.String : LikeMindsFeed.User]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers final public class GetPostLikesRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.GetPostLikesRequest.Builder
  public class Builder {
    public init()
    public func postId(_ postId: Swift.String) -> LikeMindsFeed.GetPostLikesRequest.Builder
    public func page(_ page: Swift.Int) -> LikeMindsFeed.GetPostLikesRequest.Builder
    public func pageSize(_ pageSize: Swift.Int) -> LikeMindsFeed.GetPostLikesRequest.Builder
    public func build() -> LikeMindsFeed.GetPostLikesRequest
    @objc deinit
  }
  final public func toBuilder() -> LikeMindsFeed.GetPostLikesRequest.Builder
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers final public class GetPostRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.GetPostRequest.Builder
  public class Builder {
    public init()
    public func postId(_ postId: Swift.String) -> LikeMindsFeed.GetPostRequest.Builder
    public func page(_ page: Swift.Int) -> LikeMindsFeed.GetPostRequest.Builder
    public func pageSize(_ pageSize: Swift.Int) -> LikeMindsFeed.GetPostRequest.Builder
    public func build() -> LikeMindsFeed.GetPostRequest
    @objc deinit
  }
  final public func toBuilder() -> LikeMindsFeed.GetPostRequest.Builder
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
}
public struct GetPostResponse : Swift.Decodable {
  public let post: LikeMindsFeed.Post?
  public let users: [Swift.String : LikeMindsFeed.User]?
  public let topics: [Swift.String : LikeMindsFeed.TopicFeedResponse.TopicResponse]?
  public let widgets: [Swift.String : LikeMindsFeed.Widget]?
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers final public class GetReportTagRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.GetReportTagRequest.Builder
  public class Builder {
    public init()
    public func type(_ type: Swift.Int) -> LikeMindsFeed.GetReportTagRequest.Builder
    public func build() -> LikeMindsFeed.GetReportTagRequest
    @objc deinit
  }
  final public func toBuilder() -> LikeMindsFeed.GetReportTagRequest.Builder
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
}
public struct GetReportTagResponse : Swift.Decodable {
  public let reportTags: [LikeMindsFeed.ReportTag]?
  public init(from decoder: any Swift.Decoder) throws
}
public struct ReportTag : Swift.Decodable {
  public let id: Swift.Int?
  public let name: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers final public class GetTaggingListRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.GetTaggingListRequest.Builder
  public class Builder {
    public init()
    public func searchName(_ searchName: Swift.String) -> LikeMindsFeed.GetTaggingListRequest.Builder
    public func page(_ page: Swift.Int) -> LikeMindsFeed.GetTaggingListRequest.Builder
    public func pageSize(_ pageSize: Swift.Int) -> LikeMindsFeed.GetTaggingListRequest.Builder
    public func build() -> LikeMindsFeed.GetTaggingListRequest
    @objc deinit
  }
  final public func toBuilder() -> LikeMindsFeed.GetTaggingListRequest.Builder
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
}
public struct GetTaggingListResponse : Swift.Decodable {
  public let members: [LikeMindsFeed.User]?
  public init(from decoder: any Swift.Decoder) throws
}
public struct GetUnreadNotificationCountResponse : Swift.Decodable {
  public let count: Swift.Int?
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers final public class InitiateUserRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.InitiateUserRequest.Builder
  public class Builder {
    public init()
    public func apiKey(_ apiKey: Swift.String) -> LikeMindsFeed.InitiateUserRequest.Builder
    public func isGuest(_ isGuest: Swift.Bool) -> LikeMindsFeed.InitiateUserRequest.Builder
    public func userName(_ userName: Swift.String?) -> LikeMindsFeed.InitiateUserRequest.Builder
    public func uuid(_ uuid: Swift.String) -> LikeMindsFeed.InitiateUserRequest.Builder
    public func build() -> LikeMindsFeed.InitiateUserRequest
    @objc deinit
  }
  final public func toBuilder() -> LikeMindsFeed.InitiateUserRequest.Builder
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
}
public struct InitiateUserResponse : Swift.Decodable {
  public let accessToken: Swift.String
  public let appAccess: Swift.Bool?
  public let community: LikeMindsFeed.Community?
  public let hasAnswers: Swift.Bool?
  public let refreshToken: Swift.String?
  public let user: LikeMindsFeed.User?
  public init(from decoder: any Swift.Decoder) throws
}
public struct InitialUser : Swift.Decodable {
  public let user: LikeMindsFeed.User
  public let community: LikeMindsFeed.Community
  public init(from decoder: any Swift.Decoder) throws
}
public struct SDKClientInfo : Swift.Codable {
  public let community: Swift.Int?, user: Swift.Int?
  public let userUniqueID: Swift.String?, uuid: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public typealias LMFeedClientResponse<T> = (LikeMindsFeed.LMResponse<T>) -> (Swift.Void) where T : Swift.Decodable
extension LikeMindsFeed.LMFeedClient {
  public func initiateUser(request: LikeMindsFeed.InitiateUserRequest, response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.InitiateUserResponse>?)
  public func getFeed(_ request: LikeMindsFeed.GetFeedRequest, _ response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.GetFeedResponse>?)
  public func addPost(_ request: LikeMindsFeed.AddPostRequest, _ response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.GetPostResponse>?)
  public func getPost(_ request: LikeMindsFeed.GetPostRequest, _ response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.GetPostResponse>?)
  public func getPostLikes(_ request: LikeMindsFeed.GetPostLikesRequest, _ response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.GetPostLikeResponse>?)
  public func deletePost(_ request: LikeMindsFeed.DeletePostRequest, _ response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.NoData>?)
  public func deleteComment(_ request: LikeMindsFeed.DeleteCommentRequest, _ response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.NoData>?)
  public func likePost(_ request: LikeMindsFeed.LikePostRequest, _ response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.NoData>?)
  public func savePost(_ request: LikeMindsFeed.SavePostRequest, _ response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.NoData>?)
  public func addComment(_ request: LikeMindsFeed.AddCommentRequest, _ response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.GetCommentResponse>?)
  public func replyComment(_ request: LikeMindsFeed.ReplyCommentRequest, _ response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.ReplyCommentResponse>?)
  public func getComment(_ request: LikeMindsFeed.GetCommentRequest, _ response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.GetCommentResponse>?)
  public func getCommentLikes(_ request: LikeMindsFeed.GetCommentLikesRequest, _ response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.GetCommentsLikeResponse>?)
  public func likeComment(_ request: LikeMindsFeed.LikeCommentRequest, _ response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.NoData>?)
  public func getMemberState(_ response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.GetMemberStateResponse>?)
  public func getFeedOfFeedRoom(_ request: LikeMindsFeed.GetFeedOfFeedRoomRequest, _ response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.GetFeedOfFeedRoomResponse>?)
  public func report(_ request: LikeMindsFeed.ReportRequest, _ response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.NoData>?)
  public func decodeUrl(_ request: LikeMindsFeed.DecodeUrlRequest, _ response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.DecodeUrlResponse>?)
  public func getReportTags(_ request: LikeMindsFeed.GetReportTagRequest, _ response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.GetReportTagResponse>?)
  public func getTaggingList(_ request: LikeMindsFeed.GetTaggingListRequest, _ response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.GetTaggingListResponse>?)
  public func registerDevice(request: LikeMindsFeed.RegisterDeviceRequest, response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.RegisterDeviceResponse>?)
  public func logout(request: LikeMindsFeed.LogoutRequest, response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.NoData>?)
  public func pinPost(_ request: LikeMindsFeed.PinPostRequest, _ response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.NoData>?)
  public func editPost(_ request: LikeMindsFeed.EditPostRequest, _ response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.EditPostResponse>?)
  public func editComment(_ request: LikeMindsFeed.EditCommentRequest, _ response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.EditCommentResponse>?)
  public func markReadNotification(_ request: LikeMindsFeed.MarkReadNotificationRequest, _ response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.NoData>?)
  public func getUnreadNotificationCount(_ response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.GetUnreadNotificationCountResponse>?)
  public func getNotificationFeed(_ request: LikeMindsFeed.GetNotificationFeedRequest, _ response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.GetNotificationFeedResponse>?)
  public func getAllMembers(_ request: LikeMindsFeed.GetAllMembersRequest, _ response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.GetAllMembersResponse>?)
  public func searchMembers(_ request: LikeMindsFeed.SearchMembersRequest, _ response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.SearchMembersResponse>?)
  public func getTopicFeed(_ request: LikeMindsFeed.TopicFeedRequest, _ response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.TopicFeedResponse>?)
  public func getCommunityConfiguration(_ request: LikeMindsFeed.GetCommunityConfigurationRequest, _ response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.GetCommunityConfigurationResponse>?)
  public func submitPollVoteRequest(_ request: LikeMindsFeed.SubmitPollVoteRequest, _ response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.NoData>?)
  public func validateUser(_ request: LikeMindsFeed.ValidateUserRequest, response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.ValidateUserResponse>?)
  public func addPollOption(_ request: LikeMindsFeed.AddPollOptionRequest, _ response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.AddPollOptionResponse>?)
  public func getPollVotes(_ request: LikeMindsFeed.GetPollVotesRequest, _ response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.GetPollVotesResponse>?)
  public func searchPosts(_ request: LikeMindsFeed.SearchPostsRequest, _ response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.GetFeedResponse>?)
}
public protocol LMFeedSDKCallback : AnyObject {
  func onAccessTokenExpiredAndRefreshed(accessToken: Swift.String, refreshToken: Swift.String)
  func onRefreshTokenExpired(_ completionHandler: (((accessToken: Swift.String, refreshToken: Swift.String)?) -> Swift.Void)?)
}
@_hasMissingDesignatedInitializers public class LMFeedClient {
  public static var shared: LikeMindsFeed.LMFeedClient {
    get
  }
  public static func builder() -> LikeMindsFeed.LMFeedClient
  public func build() -> LikeMindsFeed.LMFeedClient
  public func getTokens() -> LikeMindsFeed.LMResponse<LikeMindsFeed.LMFeedTokenResponse>
  public func setTokenManager(with tokenManager: any LikeMindsFeed.LMFeedSDKCallback)
  public func getAPIKey() -> LikeMindsFeed.LMResponse<Swift.String>
  public func getUserDetails() -> LikeMindsFeed.User?
  @objc deinit
}
public struct LMFeedTokenResponse : Swift.Decodable {
  public let accessToken: Swift.String
  public let refreshToken: Swift.String
  public init(from decoder: any Swift.Decoder) throws
}
public struct LMMeta : Swift.Decodable {
  public let options: [LikeMindsFeed.PollOption]
  public let pollAnswerText: Swift.String?
  public let isShowResult: Swift.Bool?
  public let voteCount: Swift.Int?
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case options
    case pollAnswerText
    case isShowResult
    case voteCount
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct LMResponse<T> : Swift.Decodable where T : Swift.Decodable {
  public let success: Swift.Bool
  public let errorMessage: Swift.String?
  public let data: T?
  public init(success: Swift.Bool, data: T?, errorMessage: Swift.String?)
  public init(from decoder: any Swift.Decoder) throws
}
public struct NoData : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public struct Like : Swift.Codable {
  public let id: Swift.String
  public let createdAt: Swift.Int?, updatedAt: Swift.Int?
  public let uuid: Swift.String?
  public let userId: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers final public class LikeCommentRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.LikeCommentRequest.Builder
  public class Builder {
    public init()
    public func postId(_ postId: Swift.String) -> LikeMindsFeed.LikeCommentRequest.Builder
    public func commentId(_ commentId: Swift.String) -> LikeMindsFeed.LikeCommentRequest.Builder
    public func build() -> LikeMindsFeed.LikeCommentRequest
    @objc deinit
  }
  final public func toBuilder() -> LikeMindsFeed.LikeCommentRequest.Builder
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers final public class LikePostRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.LikePostRequest.Builder
  public class Builder {
    public init()
    public func postId(_ postId: Swift.String) -> LikeMindsFeed.LikePostRequest.Builder
    public func build() -> LikeMindsFeed.LikePostRequest
    @objc deinit
  }
  final public func toBuilder() -> LikeMindsFeed.LikePostRequest.Builder
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
}
public struct LikedUser : Swift.Codable {
  public let userId: Swift.Int
  public let user: LikeMindsFeed.User?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers final public class LogoutRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.LogoutRequest.Builder
  public class Builder {
    public init()
    public func refreshToken(_ refreshToken: Swift.String) -> LikeMindsFeed.LogoutRequest.Builder
    public func deviceId(_ deviceId: Swift.String) -> LikeMindsFeed.LogoutRequest.Builder
    public func build() -> LikeMindsFeed.LogoutRequest
    @objc deinit
  }
  final public func toBuilder() -> LikeMindsFeed.LogoutRequest.Builder
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers final public class MarkReadNotificationRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.MarkReadNotificationRequest.Builder
  public class Builder {
    public init()
    public func activityId(_ activityId: Swift.String) -> LikeMindsFeed.MarkReadNotificationRequest.Builder
    public func build() -> LikeMindsFeed.MarkReadNotificationRequest
    @objc deinit
  }
  final public func toBuilder() -> LikeMindsFeed.MarkReadNotificationRequest.Builder
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
}
public struct MemberMenu : Swift.Codable {
  public let route: Swift.String?
  public let title: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum MemberRightState : Swift.Int, Swift.Codable {
  case unknown
  case createChatRooms
  case createPolls
  case createEvents
  case respondsInChatRoom
  case inviteMemberFromPrivateLink
  case autoApproveCreatedChatroom
  case createSecretChatRoom
  case directMessage
  case noClearYet
  case createPost
  case commentOrReplyOnPost
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [LikeMindsFeed.MemberRightState]
  public typealias RawValue = Swift.Int
  nonisolated public static var allCases: [LikeMindsFeed.MemberRightState] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public enum ManagerRightState : Swift.Int, Swift.Codable {
  case unknown
  case moderateChatRooms
  case moderateMembers
  case editCommunityDetails
  case viewMemberContactInfo
  case addCommunityManager
  case moderateDMSetting
  case moderateFeedAndComment
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [LikeMindsFeed.ManagerRightState]
  public typealias RawValue = Swift.Int
  nonisolated public static var allCases: [LikeMindsFeed.ManagerRightState] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public struct MemberRight : Swift.Codable {
  public let id: Swift.Int?
  public let isLocked: Swift.Bool?, isSelected: Swift.Bool?
  public let state: LikeMindsFeed.MemberRightState?
  public let title: Swift.String?
  public let subTitle: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ManagerRight : Swift.Codable {
  public let id: Swift.Int?
  public let isLocked: Swift.Bool?, isSelected: Swift.Bool?
  public let state: LikeMindsFeed.ManagerRightState?
  public let title: Swift.String?
  public let subTitle: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct MenuItem : Swift.Codable {
  public let id: Swift.Int
  public let title: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Activity : Swift.Codable {
  public let id: Swift.String?
  public let action: Swift.Int?
  public let actionBy: [Swift.String]?
  public let actionOn: Swift.String?
  public let activityEntityData: LikeMindsFeed.ActivityEntityData?
  public let activityText: Swift.String?
  public let createdAt: Swift.Int?
  public let cta: Swift.String?, entityID: Swift.String?, entityOwnerID: Swift.String?, uuid: Swift.String?
  public let entityType: Swift.Int?
  public let isRead: Swift.Bool?
  public let updatedAt: Swift.Int?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ActivityEntityData : Swift.Codable {
  public let id: Swift.String?
  public let attachments: [LikeMindsFeed.Attachment]?
  public let commentsCount: Swift.Int?, communityID: Swift.Int?, createdAt: Swift.Int?
  public let heading: Swift.String?
  public let isEdited: Swift.Bool?, isLiked: Swift.Bool?, isPinned: Swift.Bool?, isSaved: Swift.Bool?
  public let likesCount: Swift.Int?
  public let menuItems: [LikeMindsFeed.MenuItem]?
  public let text: Swift.String?
  public let updatedAt: Swift.Int?
  public let userId: Swift.String?, uuid: Swift.String?, deleteReason: Swift.String?, deletedByUUID: Swift.String?
  public let isDeleted: Swift.Bool?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public class OGTags : Swift.Codable {
  public var title: Swift.String?, image: Swift.String?, description: Swift.String?, url: Swift.String?
  required public init(from decoder: any Swift.Decoder) throws
  public init()
  public func title(_ title: Swift.String) -> LikeMindsFeed.OGTags
  public func image(_ image: Swift.String) -> LikeMindsFeed.OGTags
  public func description(_ description: Swift.String) -> LikeMindsFeed.OGTags
  public func url(_ url: Swift.String) -> LikeMindsFeed.OGTags
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers final public class PinPostRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.PinPostRequest.Builder
  public class Builder {
    public init()
    public func postId(_ postId: Swift.String) -> LikeMindsFeed.PinPostRequest.Builder
    public func build() -> LikeMindsFeed.PinPostRequest
    @objc deinit
  }
  final public func toBuilder() -> LikeMindsFeed.PinPostRequest.Builder
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
}
public struct PollOption : Swift.Decodable {
  public let id: Swift.String?
  public let text: Swift.String?
  public let isSelected: Swift.Bool
  public let percentage: Swift.Double
  public let uuid: Swift.String?
  public let voteCount: Swift.Int
}
extension LikeMindsFeed.PollOption {
  public init(from decoder: any Swift.Decoder) throws
}
public struct Post : Swift.Decodable {
  public let id: Swift.String
  public let attachments: [LikeMindsFeed.Attachment]?
  public let commentsCount: Swift.Int?, communityID: Swift.Int?, createdAt: Swift.Int?
  public let isPinned: Swift.Bool?, isSaved: Swift.Bool?, isEdited: Swift.Bool?, isDeleted: Swift.Bool?
  public let isLiked: Swift.Bool?
  public let likesCount: Swift.Int?
  public let menuItems: [LikeMindsFeed.MenuItem]?
  public let text: Swift.String?
  public let heading: Swift.String?
  public let updatedAt: Swift.Int?
  public let userId: Swift.String?, uuid: Swift.String?, deletedByUUID: Swift.String?, deleteReason: Swift.String?
  public let replies: [LikeMindsFeed.Comment]?
  public let topics: [Swift.String]?
  public let tempId: Swift.String?
  public let filteredComments: [Swift.String]?
  public init(from decoder: any Swift.Decoder) throws
}
public struct Widget : Swift.Decodable {
  public let id: Swift.String?
  public let parentEntityID: Swift.String?
  public let parentEntityType: Swift.String?
  public let metadata: [Swift.String : Any]?
  public let createdAt: Swift.Double?
  public let updatedAt: Swift.Double?
  public let lmMeta: LikeMindsFeed.LMMeta?
  public class Builder {
    public init()
    public func id(_ id: Swift.String?) -> LikeMindsFeed.Widget.Builder
    public func parentEntityID(_ parentEntityID: Swift.String?) -> LikeMindsFeed.Widget.Builder
    public func parentEntityType(_ parentEntityType: Swift.String?) -> LikeMindsFeed.Widget.Builder
    public func metadata(_ metadata: [Swift.String : Any]?) -> LikeMindsFeed.Widget.Builder
    public func createdAt(_ createdAt: Swift.Double?) -> LikeMindsFeed.Widget.Builder
    public func updatedAt(_ updatedAt: Swift.Double?) -> LikeMindsFeed.Widget.Builder
    public func lmMeta(_ lmMeta: LikeMindsFeed.LMMeta?) -> LikeMindsFeed.Widget.Builder
    public func build() -> LikeMindsFeed.Widget
    @objc deinit
  }
}
extension LikeMindsFeed.Widget {
  public init(from decoder: any Swift.Decoder) throws
}
public struct AnyDecodable : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public struct AnyEncodable : Swift.Encodable {
  public init(_ value: Any)
  public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers final public class RegisterDeviceRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.RegisterDeviceRequest.Builder
  public class Builder {
    public init()
    public func userId(_ userId: Swift.String) -> LikeMindsFeed.RegisterDeviceRequest.Builder
    public func token(_ token: Swift.String) -> LikeMindsFeed.RegisterDeviceRequest.Builder
    public func deviceId(_ deviceId: Swift.String) -> LikeMindsFeed.RegisterDeviceRequest.Builder
    public func build() -> LikeMindsFeed.RegisterDeviceRequest
    @objc deinit
  }
  final public func toBuilder() -> LikeMindsFeed.RegisterDeviceRequest.Builder
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
}
public struct RegisterDeviceResponse : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers final public class ReplyCommentRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.ReplyCommentRequest.Builder
  public class Builder {
    public init()
    public func text(_ text: Swift.String?) -> LikeMindsFeed.ReplyCommentRequest.Builder
    public func postId(_ postId: Swift.String) -> LikeMindsFeed.ReplyCommentRequest.Builder
    public func commentId(_ commentId: Swift.String) -> LikeMindsFeed.ReplyCommentRequest.Builder
    public func tempId(_ tempId: Swift.String?) -> LikeMindsFeed.ReplyCommentRequest.Builder
    public func build() -> LikeMindsFeed.ReplyCommentRequest
    @objc deinit
  }
  final public func toBuilder() -> LikeMindsFeed.ReplyCommentRequest.Builder
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
}
public struct ReplyCommentResponse : Swift.Codable {
  public let comment: LikeMindsFeed.Comment?
  public let users: [Swift.String : LikeMindsFeed.User]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ReportEntityType : Swift.Int, Swift.Encodable {
  case post
  case comment
  case reply
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class ReportRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.ReportRequest.Builder
  public class Builder {
    public init()
    public func tagId(_ tagId: Swift.Int) -> LikeMindsFeed.ReportRequest.Builder
    public func entityId(_ entityId: Swift.String) -> LikeMindsFeed.ReportRequest.Builder
    public func uuid(_ uuid: Swift.String) -> LikeMindsFeed.ReportRequest.Builder
    public func entityType(_ entityType: LikeMindsFeed.ReportEntityType) -> LikeMindsFeed.ReportRequest.Builder
    public func reason(_ reason: Swift.String) -> LikeMindsFeed.ReportRequest.Builder
    public func build() -> LikeMindsFeed.ReportRequest
    @objc deinit
  }
  final public func toBuilder() -> LikeMindsFeed.ReportRequest.Builder
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers final public class SavePostRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.SavePostRequest.Builder
  public class Builder {
    public init()
    public func postId(_ postId: Swift.String) -> LikeMindsFeed.SavePostRequest.Builder
    public func build() -> LikeMindsFeed.SavePostRequest
    @objc deinit
  }
  final public func toBuilder() -> LikeMindsFeed.SavePostRequest.Builder
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers final public class SearchMembersRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.SearchMembersRequest.Builder
  public class Builder {
    public init()
    public func page(_ page: Swift.Int) -> LikeMindsFeed.SearchMembersRequest.Builder
    public func pageSize(_ pageSize: Swift.Int) -> LikeMindsFeed.SearchMembersRequest.Builder
    public func search(_ search: Swift.String) -> LikeMindsFeed.SearchMembersRequest.Builder
    public func searchType(_ searchType: Swift.String) -> LikeMindsFeed.SearchMembersRequest.Builder
    public func build() -> LikeMindsFeed.SearchMembersRequest
    @objc deinit
  }
  final public func toBuilder() -> LikeMindsFeed.SearchMembersRequest.Builder
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
}
public struct SearchMembersResponse : Swift.Decodable {
  public let community: LikeMindsFeed.Community?
  public let members: [LikeMindsFeed.User]?
  public let totalFilteredMembers: Swift.Int?, totalMembers: Swift.Int?, totalOnlyMembers: Swift.Int?, totalPendingMembers: Swift.Int?
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class SearchPostsRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.SearchPostsRequest.Builder
  public class Builder {
    public init()
    public func search(_ search: Swift.String) -> LikeMindsFeed.SearchPostsRequest.Builder
    public func searchType(_ searchType: Swift.String) -> LikeMindsFeed.SearchPostsRequest.Builder
    public func page(_ page: Swift.Int) -> LikeMindsFeed.SearchPostsRequest.Builder
    public func pageSize(_ pageSize: Swift.Int) -> LikeMindsFeed.SearchPostsRequest.Builder
    public func build() -> LikeMindsFeed.SearchPostsRequest
    @objc deinit
  }
  public func toBuilder() -> LikeMindsFeed.SearchPostsRequest.Builder
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct ServiceAPI {
  public static let bucketURL: Swift.String
  public static let awsPoolIdCognito: Swift.String
  public static let secretAccessKey: Swift.String
  public static let accessKey: Swift.String
}
@_hasMissingDesignatedInitializers final public class SubmitPollVoteRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.SubmitPollVoteRequest.Builder
  public class Builder {
    public init()
    public func pollID(_ pollID: Swift.String) -> LikeMindsFeed.SubmitPollVoteRequest.Builder
    public func votes(_ votes: [Swift.String]) -> LikeMindsFeed.SubmitPollVoteRequest.Builder
    public func build() -> LikeMindsFeed.SubmitPollVoteRequest
    @objc deinit
  }
  final public func toBuilder() -> LikeMindsFeed.SubmitPollVoteRequest.Builder
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
}
public enum SubmitPollVoteError : Swift.Error {
  case pollIDNotProvided
  public static func == (a: LikeMindsFeed.SubmitPollVoteError, b: LikeMindsFeed.SubmitPollVoteError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension LikeMindsFeed.SubmitPollVoteError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@_hasMissingDesignatedInitializers final public class TopicFeedRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.TopicFeedRequest.Builder
  public class Builder {
    public init()
    public func setSearchTopic(_ search: Swift.String) -> LikeMindsFeed.TopicFeedRequest.Builder
    public func setSearchType(_ searchType: Swift.String) -> LikeMindsFeed.TopicFeedRequest.Builder
    public func setEnableState(_ isEnabled: Swift.Bool) -> LikeMindsFeed.TopicFeedRequest.Builder
    public func setPage(_ page: Swift.Int) -> LikeMindsFeed.TopicFeedRequest.Builder
    public func setPageSize(_ pageSize: Swift.Int) -> LikeMindsFeed.TopicFeedRequest.Builder
    public func build() -> LikeMindsFeed.TopicFeedRequest
    @objc deinit
  }
  final public func toBuilder() -> LikeMindsFeed.TopicFeedRequest.Builder
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
}
public struct TopicFeedResponse : Swift.Decodable {
  public let topics: [LikeMindsFeed.TopicFeedResponse.TopicResponse]?
  public struct TopicResponse : Swift.Decodable {
    public let id: Swift.String?
    public let isEnabled: Swift.Bool?
    public let name: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct User : Swift.Codable {
  public let id: Swift.Int?
  public let imageUrl: Swift.String?, name: Swift.String?, organisationName: Swift.String?
  public let userUniqueID: Swift.String?, uuid: Swift.String?
  public let isGuest: Swift.Bool
  public let isDeleted: Swift.Bool?
  public let isOwner: Swift.Bool?
  public let customTitle: Swift.String?
  public let state: Swift.Int?, updatedAt: Swift.Int?
  public let sdkClientInfo: LikeMindsFeed.SDKClientInfo?
  public let memberSince: Swift.String?
  public let memberSinceEpoch: Swift.Int?
  public let menu: [LikeMindsFeed.MemberMenu]?
  public let questionAnswers: [LikeMindsFeed.QuestionAnswer]?
  public let route: Swift.String?
  public let customIntroText: Swift.String?
  public var clientUUID: Swift.String? {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct QuestionAnswer : Swift.Codable {
  public let question: LikeMindsFeed.Question?
  public let answer: LikeMindsFeed.Answer?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Question : Swift.Codable {
  public let communityID: Swift.Int?
  public let directoryFields: Swift.Bool?, isHidden: Swift.Bool?
  public let memberID: Swift.Int?, questionID: Swift.Int?
  public let questionTitle: Swift.String?
  public let state: Swift.Int?
  public let tag: Swift.String?
  public let value: Swift.String?
  public let imageURL: Swift.String?
  public let dropdownSelectionLimit: Swift.Int?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Answer : Swift.Codable {
  public let communityID: Swift.Int?, memberID: Swift.Int?, questionID: Swift.Int?
  public let answer: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@propertyWrapper public struct UserDefaultsBacked<Value> where Value : Swift.Decodable, Value : Swift.Encodable {
  public var wrappedValue: Value? {
    get
    set
  }
}
public struct UserDetails {
  @LikeMindsFeed.UserDefaultsBacked public static var userDetails: LikeMindsFeed.User? {
    get
    set
    _modify
  }
}
@_hasMissingDesignatedInitializers final public class ValidateUserRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.ValidateUserRequest.Builder
  public class Builder {
    public init()
    public func accessToken(_ accessToken: Swift.String) -> LikeMindsFeed.ValidateUserRequest.Builder
    public func refreshToken(_ refreshToken: Swift.String) -> LikeMindsFeed.ValidateUserRequest.Builder
    public func build() -> LikeMindsFeed.ValidateUserRequest
    @objc deinit
  }
  final public func toBuilder() -> LikeMindsFeed.ValidateUserRequest.Builder
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
}
public enum ValidateUserError : Swift.Error {
  case accessTokenNotProvided
  case refreshTokenNotProvided
  public static func == (a: LikeMindsFeed.ValidateUserError, b: LikeMindsFeed.ValidateUserError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension LikeMindsFeed.ValidateUserError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public struct ValidateUserResponse : Swift.Decodable {
  public let user: LikeMindsFeed.User?
  public let community: LikeMindsFeed.Community?
  public let appAccess: Swift.Bool?
  public init(from decoder: any Swift.Decoder) throws
}
extension LikeMindsFeed.AttachmentType : Swift.Equatable {}
extension LikeMindsFeed.AttachmentType : Swift.Hashable {}
extension LikeMindsFeed.AttachmentType : Swift.RawRepresentable {}
extension LikeMindsFeed.MemberState : Swift.Equatable {}
extension LikeMindsFeed.MemberState : Swift.Hashable {}
extension LikeMindsFeed.MemberState : Swift.RawRepresentable {}
extension LikeMindsFeed.LMMeta.CodingKeys : Swift.Equatable {}
extension LikeMindsFeed.LMMeta.CodingKeys : Swift.Hashable {}
extension LikeMindsFeed.LMMeta.CodingKeys : Swift.RawRepresentable {}
extension LikeMindsFeed.MemberRightState : Swift.RawRepresentable {}
extension LikeMindsFeed.MemberRightState : Swift.CaseIterable {}
extension LikeMindsFeed.MemberRightState : Swift.Equatable {}
extension LikeMindsFeed.MemberRightState : Swift.Hashable {}
extension LikeMindsFeed.ManagerRightState : Swift.RawRepresentable {}
extension LikeMindsFeed.ManagerRightState : Swift.CaseIterable {}
extension LikeMindsFeed.ManagerRightState : Swift.Equatable {}
extension LikeMindsFeed.ManagerRightState : Swift.Hashable {}
extension LikeMindsFeed.ReportEntityType : Swift.Equatable {}
extension LikeMindsFeed.ReportEntityType : Swift.Hashable {}
extension LikeMindsFeed.ReportEntityType : Swift.RawRepresentable {}
extension LikeMindsFeed.SubmitPollVoteError : Swift.Equatable {}
extension LikeMindsFeed.SubmitPollVoteError : Swift.Hashable {}
extension LikeMindsFeed.ValidateUserError : Swift.Equatable {}
extension LikeMindsFeed.ValidateUserError : Swift.Hashable {}
